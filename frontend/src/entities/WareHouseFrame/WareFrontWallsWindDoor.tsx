/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/WareFront_Walls_WindDoor.glb -T -t -I 
Files: ./public/models/WareFront_Walls_WindDoor.glb [1.22MB] > /Users/yizhi/vscode/SSAFY/S10P31S109/frontend/WareFront_Walls_WindDoor-transformed.glb [661.45KB] (46%)
*/

import * as THREE from 'three';
import React, { useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Object001: THREE.Mesh;
    Object002: THREE.Mesh;
    WareFront_Walls_WindDoor_2: THREE.Mesh;
    WareFront_Walls_WindDoor_3: THREE.Mesh;
    WareFront_Walls_WindDoor_4: THREE.Mesh;
    WareFront_Wind: THREE.Mesh;
    WareFront_Windglasse: THREE.Mesh;
  };
  materials: {
    WarehouseMetal01: THREE.MeshStandardMaterial;
    WarehouseMetal02: THREE.MeshStandardMaterial;
    WarehouseConcrete3: THREE.MeshStandardMaterial;
    WarehouseConcrete1: THREE.MeshStandardMaterial;
    WarehouseConcrete4: THREE.MeshStandardMaterial;
    WarehouseWindow: THREE.MeshStandardMaterial;
    WarehouseWindglasses: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);
export function Instances({
  children,
  ...props
}: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF(
    '/models/WareFront_Walls_WindDoor-transformed.glb'
  ) as GLTFResult;
  const instances = useMemo(
    () => ({
      Object: nodes.Object001,
      Object1: nodes.Object002,
      WareFrontWallsWindDoor: nodes.WareFront_Walls_WindDoor_2,
      WareFrontWallsWindDoor1: nodes.WareFront_Walls_WindDoor_3,
      WareFrontWallsWindDoor2: nodes.WareFront_Walls_WindDoor_4,
      WareFrontWind: nodes.WareFront_Wind,
      WareFrontWindglasse: nodes.WareFront_Windglasse,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props} castShadow receiveShadow>
      {(instances: ContextType) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null}>
      <instances.Object />
      <instances.Object1 />
      <instances.WareFrontWind />
      {/* <instances.WareFrontWindglasse /> */}
      <instances.WareFrontWallsWindDoor />
      <instances.WareFrontWallsWindDoor1 />
      <instances.WareFrontWallsWindDoor2 />
    </group>
  );
}

useGLTF.preload('/models/WareFront_Walls_WindDoor-transformed.glb');
