/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/AGV.glb -t -T -I --shadows 
Files: ./public/models/AGV.glb [1.89MB] > C:\Users\SSAFY\Documents\GitLab\S10P31S109\frontend\AGV-transformed.glb [172.49KB] (91%)
*/

import * as THREE from 'three';
import React, {
  useMemo,
  useContext,
  createContext,
  useCallback,
  useState,
} from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { AGVToolTip } from 'widget/agv/ui';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    geo_black_matte_1: THREE.Mesh;
    geo_aluminium_3: THREE.Mesh;
    geo_rubber_6: THREE.Mesh;
    geo_black_7: THREE.Mesh;
    geo_light_cyan_1: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
    PaletteMaterial004: THREE.MeshStandardMaterial;
    PaletteMaterial005: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);
export function Instances({
  children,
  ...props
}: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/models/AGV-transformed.glb') as GLTFResult;
  const instances = useMemo(
    () => ({
      Geoblackmatte: nodes.geo_black_matte_1,
      Geoaluminium: nodes.geo_aluminium_3,
      Georubber: nodes.geo_rubber_6,
      Geoblack: nodes.geo_black_7,
      Geolightcyan: nodes.geo_light_cyan_1,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}
type ModelProps = JSX.IntrinsicElements['group'] & {
  battery: number;
  amrId: number;
  name: string;
};
export function Model(props: ModelProps) {
  const instances = useContext(context);
  const [isFPV, setIsFPV] = useState(false);
  useFrame(state => {
    if (!isFPV) return;
    const target = new THREE.Vector3();
    const robot = state.scene.getObjectByName(props.name);
    // getWorldPosition으로 target에 robot의 위치를 저장한다. (헷갈림 주의)
    robot?.children[0].getWorldPosition(target);
    target.y = 2;
    state.camera.position.copy(target);
  });
  const [hovered, setHover] = useState(false);
  const onPointerOver = useCallback(() => setHover(true), []);
  const onPointerOut = useCallback(() => setHover(false), []);
  return (
    <group
      {...props}
      dispose={null}
      name={props.name}
      onClick={() => setIsFPV(true)}
      onPointerMissed={() => setIsFPV(false)}
      onPointerOver={onPointerOver}
      onPointerOut={onPointerOut}
    >
      <pointLight color="#00afff" intensity={10} />
      <AGVToolTip
        battery={props.battery}
        amrId={props.amrId}
        hovered={hovered}
      />
      <instances.Geoblackmatte />
      <instances.Geoaluminium />
      <instances.Georubber />
      <instances.Geoblack />
      <instances.Geolightcyan />
    </group>
  );
}

useGLTF.preload('/models/AGV-transformed.glb');
