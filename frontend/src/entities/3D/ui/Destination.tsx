/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/Box_PalletGroup.glb -t -T -I 
Files: ./public/models/Box_PalletGroup.glb [640.97KB] > C:\Users\m_a_y\OneDrive\문서\SSAFY\S10P31S109\frontend\Box_PalletGroup-transformed.glb [62.54KB] (90%)
*/

import * as THREE from 'three';
import React, { useRef, useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Box_PalletGroup_1: THREE.Mesh;
  };
  materials: {
    Box_PalletGroup: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);
export function Instances({
  children,
  ...props
}: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF(
    '/models/Box_PalletGroup-transformed.glb'
  ) as GLTFResult;
  const instances = useMemo(
    () => ({
      BoxPalletGroup: nodes.Box_PalletGroup_1,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null}>
      <instances.BoxPalletGroup />
    </group>
  );
}

useGLTF.preload('/models/Box_PalletGroup-transformed.glb');
