/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/BigLogistics.glb -T -t -I 
Files: ./public/models/BigLogistics.glb [3.07MB] > /Users/yizhi/vscode/SSAFY/S10P31S109/frontend/BigLogistics-transformed.glb [434.04KB] (86%)
*/

import * as THREE from 'three';
import React, {
  useRef,
  useMemo,
  useContext,
  createContext,
  useEffect,
  useState,
  useCallback,
} from 'react';
import { useGLTF, Merged, Outlines } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useControlStore } from '@shared/store/useControlStore';

type GLTFResult = GLTF & {
  nodes: {
    BigShelves01002: THREE.Mesh;
    BigShelves01002_1: THREE.Mesh;
    BigShelves01002_2: THREE.Mesh;
    BigShelves01002_3: THREE.Mesh;
    BigShelvesWoodBox: THREE.Mesh;
    Box_Pallet01: THREE.Mesh;
    Box_Pallet02: THREE.Mesh;
  };
  materials: {
    ['BigShelvesMetall03.003']: THREE.MeshStandardMaterial;
    ['BigShelvesMetall01.003']: THREE.MeshStandardMaterial;
    ['BigShelvesWood.003']: THREE.MeshStandardMaterial;
    ['BigShelvesMetall02.003']: THREE.MeshStandardMaterial;
    ['BigShelvesWoodBox.003']: THREE.MeshStandardMaterial;
    ['Box_Pallet01.001']: THREE.MeshStandardMaterial;
    ['Box_Pallet02.001']: THREE.MeshStandardMaterial;
  };
};

const context = createContext({} as ContextType);
export function Instances({
  children,
  ...props
}: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF(
    '/models/BigLogistics-transformed.glb'
  ) as GLTFResult;
  const instances = useMemo(
    () => ({
      BigShelves: nodes.BigShelves01002,
      BigShelves1: nodes.BigShelves01002_1,
      BigShelves2: nodes.BigShelves01002_2,
      BigShelves3: nodes.BigShelves01002_3,
      BigShelvesWoodBox: nodes.BigShelvesWoodBox,
      BoxPallet: nodes.Box_Pallet01,
      BoxPallet1: nodes.Box_Pallet02,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const thickness = 0.06;
  const color = 'white';
  const [hovered, setHover] = useState(false);
  useEffect(
    () =>
      void (document.body.style.cursor =
        hovered && isControlMode ? 'pointer' : 'auto'),
    [hovered]
  );
  const onPointerOver = useCallback(() => setHover(true), []);
  const onPointerOut = useCallback(() => setHover(false), []);
  const {
    isControlMode,
    actions: { addNodeList },
  } = useControlStore();
  const instances = useContext(context);

  return (
    <group
      {...props}
      dispose={null}
      onClick={e => {
        e.stopPropagation();
        if (isControlMode)
          addNodeList([
            Math.round(e.eventObject.position.z),
            Math.round(e.eventObject.position.x),
          ]);
      }}
      onPointerOver={onPointerOver}
      onPointerOut={onPointerOut}
    >
      <instances.BigShelvesWoodBox>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BigShelvesWoodBox>
      <instances.BoxPallet>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BoxPallet>
      <instances.BoxPallet1>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BoxPallet1>
      <instances.BigShelves>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BigShelves>
      <instances.BigShelves1>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BigShelves1>
      <instances.BigShelves2>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BigShelves2>
      <instances.BigShelves3>
        {hovered && isControlMode && (
          <Outlines thickness={thickness} angle={0} color={color} />
        )}
      </instances.BigShelves3>
    </group>
  );
}

useGLTF.preload('/models/BigLogistics-transformed.glb');
