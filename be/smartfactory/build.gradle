buildscript {
    ext {
        set('springCloudVersion', "2021.0.3")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'samsung.smart'
version = '0.0.1'
compileJava.options.encoding = "UTF-8"

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring-Mvc
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    // MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // Configuration-Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Cloud-Config
    implementation 'org.springframework.cloud:spring-cloud-starter-config:4.1.1'
    // Actuators
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    // Querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}